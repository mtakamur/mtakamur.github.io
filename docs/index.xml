<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pi fruit</title><link>https://mtakamur.github.io/</link><description>Recent content on Pi fruit</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 30 Oct 2021 11:34:05 +0900</lastBuildDate><atom:link href="https://mtakamur.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Item 1: Limit mutability(やたらと変更可能にしない)</title><link>https://mtakamur.github.io/effective_kotlin/part_1/chapter_1/item_1_limit_mutability/</link><pubDate>Wed, 01 Dec 2021 14:33:55 +0900</pubDate><guid>https://mtakamur.github.io/effective_kotlin/part_1/chapter_1/item_1_limit_mutability/</guid><description>&lt;p>更新日: 2021/12/11&lt;/p></description></item><item><title>Item 19: do not repeat knowledge</title><link>https://mtakamur.github.io/effective_kotlin/part_2/chapter_3/item_19_do_not_repeat_knowledge/</link><pubDate>Sun, 31 Oct 2021 22:43:31 +0900</pubDate><guid>https://mtakamur.github.io/effective_kotlin/part_2/chapter_3/item_19_do_not_repeat_knowledge/</guid><description/></item><item><title>Item 2: Minimize the scope of variables(変数のスコープは最小化する)</title><link>https://mtakamur.github.io/effective_kotlin/part_1/chapter_1/item_2_minimize_the_scope_of_variables/</link><pubDate>Wed, 01 Dec 2021 14:35:16 +0900</pubDate><guid>https://mtakamur.github.io/effective_kotlin/part_1/chapter_1/item_2_minimize_the_scope_of_variables/</guid><description>&lt;p>更新日: 2021/12/20&lt;/p></description></item><item><title>Dart開発環境のセットアップ</title><link>https://mtakamur.github.io/dart/setup_environment/</link><pubDate>Thu, 02 Jun 2022 14:27:02 +0900</pubDate><guid>https://mtakamur.github.io/dart/setup_environment/</guid><description>&lt;p>&lt;a href="https://www.jetbrains.com/ja-jp/idea/">IntelliJ idea&lt;/a>による Dart の開発環境の設定方法。&lt;/p></description></item><item><title>コレクションの deep copy が欲しい</title><link>https://mtakamur.github.io/kotlin/struggled/collection_deep_copy/</link><pubDate>Sat, 30 Oct 2021 11:46:28 +0900</pubDate><guid>https://mtakamur.github.io/kotlin/struggled/collection_deep_copy/</guid><description>&lt;p>更新日: 2021/9/12&lt;/p></description></item><item><title>data class copy() の対象</title><link>https://mtakamur.github.io/kotlin/struggled/target_of_copy/</link><pubDate>Sat, 30 Oct 2021 11:46:57 +0900</pubDate><guid>https://mtakamur.github.io/kotlin/struggled/target_of_copy/</guid><description>&lt;p>更新日: 2021/9/13&lt;/p></description></item><item><title>関数の基礎</title><link>https://mtakamur.github.io/dart/basis_on_function/</link><pubDate>Fri, 03 Jun 2022 04:44:59 +0900</pubDate><guid>https://mtakamur.github.io/dart/basis_on_function/</guid><description>&lt;p>プログラムを構成する基礎である関数(メソッド)。
Dart 言語での書き方を学びます。&lt;/p></description></item><item><title>変数の宣言</title><link>https://mtakamur.github.io/dart/variable_declaration/</link><pubDate>Sat, 04 Jun 2022 01:29:02 +0900</pubDate><guid>https://mtakamur.github.io/dart/variable_declaration/</guid><description>&lt;p>整数や文字列などの情報を保持しておくための箱「変数」。
ここでは Dart 言語における変数の宣言方法について学びます。&lt;/p></description></item><item><title>コレクション</title><link>https://mtakamur.github.io/dart/collection/</link><pubDate>Wed, 08 Jun 2022 00:00:21 +0900</pubDate><guid>https://mtakamur.github.io/dart/collection/</guid><description>&lt;p>Dart におけるコレクション(配列)の扱いを学びます。&lt;/p></description></item><item><title>関数</title><link>https://mtakamur.github.io/dart/function-advanced/</link><pubDate>Fri, 10 Jun 2022 00:04:56 +0900</pubDate><guid>https://mtakamur.github.io/dart/function-advanced/</guid><description>&lt;p>Dart における関数定義のまとめ。
&lt;a href="https://mtakamur.github.io/dart/basis_on_function">基礎編&lt;/a>の内容を前提としています。
また、解説中では &lt;a href="https://dart.dev/guides/language/language-tour#functions:~:text=Version%20note%3A%20Null%20safety%20was%20introduced%20in%20Dart%202.12.%20Using%20null%20safety%20requires%20a%20language%20version%20of%20at%20least%202.12.">null safety&lt;/a>が有効である想定です。&lt;/p></description></item><item><title>Item 31: Define contract with documentation</title><link>https://mtakamur.github.io/effective_kotlin/part_2/chapter_4/item_31_define_contract_with_documentation/</link><pubDate>Sat, 20 Aug 2022 00:24:29 +0900</pubDate><guid>https://mtakamur.github.io/effective_kotlin/part_2/chapter_4/item_31_define_contract_with_documentation/</guid><description>&lt;p>更新日: 2022/08/20&lt;/p></description></item><item><title>Item 30: Minimize elements visibility(メソッドや変数はできるだけ見えないように)</title><link>https://mtakamur.github.io/effective_kotlin/part_2/chapter_4/item_30_minimize_elements_visibility/</link><pubDate>Sat, 13 Aug 2022 15:10:15 +0900</pubDate><guid>https://mtakamur.github.io/effective_kotlin/part_2/chapter_4/item_30_minimize_elements_visibility/</guid><description>&lt;p>更新日: 2022/08/13&lt;/p></description></item><item><title>Flutter SDKのセットアップ</title><link>https://mtakamur.github.io/flutter/setup_flutter_sdk/</link><pubDate>Sun, 22 May 2022 05:19:07 +0900</pubDate><guid>https://mtakamur.github.io/flutter/setup_flutter_sdk/</guid><description>&lt;p>flutter doctor が通らない人へ。&lt;/p></description></item><item><title>Trailing commas</title><link>https://mtakamur.github.io/kotlin/others/trailing_commas/</link><pubDate>Sun, 31 Oct 2021 01:28:27 +0900</pubDate><guid>https://mtakamur.github.io/kotlin/others/trailing_commas/</guid><description>まとめ Kotlin 1.4 以降ではコレクションやメソッド引数の最終要素に&amp;quot;,&amp;quot; (trailing comma) を残しておいてもコンパイルエラーになりません trailing comma があってもなくてもコードの動作は一切変わりません trailing comma をつけるようにしておくと、チーム開発するときのレビューがしやすくなります (コレクションやメソッドの引数に変更を加えても、追加削除した行だけが変更点として表示されるから) Trailing comma (末尾のカンマ) コレクションの要素やメソッドのパラメータなど、同列の要素を複数個並べたいときは下記のようにカンマで区切って並べます。 この時、最後の要素の後には&amp;quot;,&amp;ldquo;を書かないのが一般的かと思います。 実際、Kotlin 1.4 より古いバージョンでは、余分なコンマを付けているとコンパイルエラーになります。
val colors = listOf( &amp;#34;red&amp;#34;, &amp;#34;green&amp;#34;, &amp;#34;blue&amp;#34; // &amp;lt;-ここにはカンマをつけていない ) ところが Kotlin 1.4 以降では、最終要素の後ろにも&amp;rdquo;,&amp;ldquo;を残しておいて OK になりました。 この余分なカンマのことを trailing comma と呼びます。
なにがうれしい？ trailing comma があってもなくてもコードの動作には一切影響ありません。
trailing comma が若干ありがたく感じるのは、チームで開発を進めて、お互いにコードをレビューしあうような状況でしょうか。 開発を進めていくと、既存のメソッドにパラメータを追加したり、逆に削除したくなることはよくあるかと思いますが、この時に &amp;ldquo;これは最後の要素だからカンマを消して…&amp;rdquo; とか考える必要がなくなります。 カンマの追加/削除が本質的な変更点ではありえないでしょうから、余計な変更を加える必要がなくなり、コードレビューをするときも、本質的な変更点だけに集中することができるようになります。
配列やパラメータの順番だけを変更するときも幾分やりやすくなっているかと思います。 カンマのあるなしは気にせず、配列の行丸ごとの置換で OK になります。公式ドキュメントにもその旨記述があります。 多分ありがたいのはこれくらいでしょうか。
コンマ？カンマ？ 今さらコンマとカンマで表記ゆれがあることに気づきました…。 アドバイスとアドヴァイスみたいな。 カタカナで発音を表現しようとしている時点で間違ってますから、どっちでもいいですよね。</description></item></channel></rss>