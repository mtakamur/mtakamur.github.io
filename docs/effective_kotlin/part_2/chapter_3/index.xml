<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reusability on Pi fruit</title>
    <link>https://mtakamur.github.io/effective_kotlin/part_2/chapter_3/</link>
    <description>Recent content in Reusability on Pi fruit</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 Oct 2021 22:51:26 +0900</lastBuildDate><atom:link href="https://mtakamur.github.io/effective_kotlin/part_2/chapter_3/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Item 19: do not repeat knowledge</title>
      <link>https://mtakamur.github.io/effective_kotlin/part_2/chapter_3/item_19_do_not_repeat_knowledge/</link>
      <pubDate>Sun, 31 Oct 2021 22:43:31 +0900</pubDate>
      
      <guid>https://mtakamur.github.io/effective_kotlin/part_2/chapter_3/item_19_do_not_repeat_knowledge/</guid>
      <description>更新日: 2021/10/04
この節の内容は、言語にとらわれず意識しておくべき基礎的な原則です。
まとめ  コーディングしている中で、コピペが必要になったときはちょっと立ち止まろう。同じことを二度書く必要はきっとないはず。 すべての変数やメソッドは変更されうる、という前提の下でコーディングしよう。 つまり無意味にコピペがあると、次の 2 つの理由で痛い目を見ます。  一つを変更したら全部変えなきゃ。面倒くさくない？ コピペしたところは一切もれなく(チームのほかの人がコピペしたものも含めて)把握している？たった一つでも見逃しているとその時点でバク発生！   ただし、何でもかんでも共通化してコピペを避けるべきというわけではない。共通化すべきかどうかの判断基準の一つは、片方を変更するときにもれなくもう片方も変更する必要があるか。 もしも別々に変更する可能性があるのであれば、それは共通化すべきでない。 なぜなら姿形はまったく同じでも意味の違うものであるから。 共通化にせよ分離にせよ、どちらかに極端に偏るといずれも良くない。 十分に訓練して、程よいバランスを保てるようにしよう。    ちょっと詳しく コーディングの原則としてよく知られている(しかし実践は実は難しい)&amp;ldquo;DRY (= Don&amp;rsquo;t Repeat Yourself) 原則&amp;quot;というものがあります。 平たく言えば、&amp;ldquo;同じ情報は 2 度書くのは良くないよ&amp;quot;という原則です。 まとめにある通り、1 つのプロジェクトの中でコピペをするということは、 どこかと同じ変数なりアルゴリズムなりを 2 度以上書いているということになります。 これは少なくとも下記の理由で避けるべきです。
 単純に無駄だから。共通で使えるようにすればコーディングする時間もファイルサイズも 2 つ分は必要ないはずですよね。 1 つを変更しなくてはいけない時に死ぬほど面倒くさい。 なぜならコピペしたものを全部もれなく変更しなくてはいけないから。 DRY 原則に反したコーディングを、WET(= We Enjoy Typing, Waste Everyone&amp;rsquo;s Time, or Write Everything Twice) アンチパターンと呼んだりします。 DRY に対して WET、いい感じで対になってますね。  Knowledge -情報/知識- この節で言う&amp;quot;Knowledge&amp;quot;としては主に下記の 2 つに焦点を当てています。
ロジック: コードの振る舞いを記述するもの 共通アルゴリズム: ロジックを実現するための下回り計算 上記 2 つの違いはぱっと見わかりづらいものですが、ロジックはアプリケーションの要求に応じていつでも変わりうるもので、 それに対してアルゴリズムは、ロジックが変更されても基本的には変更されることのない仕組みの部分をさしています。</description>
    </item>
    
  </channel>
</rss>
